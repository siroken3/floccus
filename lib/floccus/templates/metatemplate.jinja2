{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This is auto generated cloudformation file.",
    "Resources": {

{% for vpc in model.vpcs %}
        "{{ vpc.cfn_resource_name() }}" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : "{{ vpc.cidr_block }}",
                "InstanceTenancy" : "{{ vpc.instanceTenancy }}"
            }
        },
{% endfor %}
{% for gateway in model.internet_gateways %}
        "{{ gateway.cfn_resource_name() }}" : {
           "Type" : "AWS::EC2::InternetGateway"
        },
{% endfor %}
{% for attachment in model.gateway_attachments %}
        "{{ attachment.cfn_resource_name() }}" : {
           "Type" : "AWS::EC2::VPCGatewayAttachment",
           "Properties" : {
               "VpcId" : {{ attachment.vpc | to_cfn_ref }},
               "InternetGatewayId" : {{ attachment.gateway | to_cfn_ref }}
           }
        },
{% endfor %}
{% for subnet in model.subnets %}
        "{{ subnet.cfn_resource_name() }}" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone" : "{{ subnet.availability_zone }}",
                "CidrBlock" : "{{ subnet.cidr_block }}",
                "VpcId" : {{ subnet.vpc | to_cfn_ref }}
            }
        },
{% endfor %}
{% for security_group in model.security_groups %}
        "{{ security_group.cfn_resource_name() }}" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "{{ security_group.description }}",
{% if security_group.vpc is not none %}
                "VpcId" : {{ security_group.vpc | to_cfn_ref }}
{% endif %}
            }
        },
{% for ingress in security_group.rules %}
{% for grant in ingress.grants %}
        "{{ security_group.cfn_resource_name() }}SecurityGroupIngress{{ loop.index }}" : {
            "Type" : "AWS::EC2::SecurityGroupIngress",
            "Properties" : {
{% if security_group.vpc_id is none %}
                "GroupName" : "{{ security_group.cfn_resource_name() }}",
{% if grant.group_id is not none  %}
                "SourceSecurityGroupName" : {{ model.cfn_resouce_map[grant.group_id] | to_cfn_ref }},
{% endif %}
{% else %}
                "GroupId" : {{ security_group | to_cfn_ref }},
{% if grant.groupId is defined and grant.groupId is not none %}
                "SourceSecurityGroupId" : {{ model.cfn_resource_map[grant.groupId] | to_cfn_ref }},
{% endif %}
{% endif %}
                "IpProtocol" : "{{ ingress.ip_protocol }}",
{% if grant.cidr_ip is not none %}
                "CidrIp" : "{{ grant.cidr_ip }}",
{% endif %}
{#
{% if grant.owner_id is not none %}
                "SourceSecurityGroupOwnerId" : "{{ grant.owner_id }}",
{% endif %}
#}
                "FromPort" : "{{ ingress.from_port if ingress.from_port is not none else 0 }}",
                "ToPort" : "{{ ingress.to_port if ingress.to_port is not none else 65536 }}"
            }
        },
{% endfor %}
{% endfor %}
{% for egress in security_group.rules_egress %}
{% for grant in egress.grants %}
        "{{ security_group.cfn_resource_name() }}SecurityGroupEgress{{ loop.index }}" : {
            "Type" : "AWS::EC2::SecurityGroupEgress",
            "Properties" : {
{% if security_group.vpc_id is none %}
                "GroupName" : "{{ security_group.cfn_resource_name() }}",
{% if grant.group_id is not none %}
                "SourceSecurityGroupName" : {{ model.cfn_resource_map[grant.group_id] | to_cfn_ref }},
{% endif %}
{% else %}
                "GroupId" : {{ security_group | to_cfn_ref }},
{% if grant.groupId is defined and grant.groupId is not none %}
                "SourceSecurityGroupId" : {{ model.cfn_resource_map[grant.groupId] | to_cfn_ref }},
{% endif %}
{% endif %}
                "IpProtocol" : "{{ egress.ip_protocol }}",
{% if grant.cidr_ip is not none %}
                "CidrIp" : "{{ grant.cidr_ip }}",
{% endif %}
{% if grant.owner_id is not none %}
                "SourceSecurityGroupOwnerId" : {{ grant.owner_id | to_cfn_ref }},
{% endif %}
                "FromPort" : "{{ egress.from_port if egress.from_port is not none else 0 }}",
                "ToPort" : "{{ egress.to_port if egress.to_port is not none else 65536 }}"
            }
        },
{% endfor %}
{% endfor %}
{% endfor %}
{% for route_table in model.route_tables %}
        "{{ route_table.cfn_resource_name() }}" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : {{ route_table.vpc | to_cfn_ref }},
                "Tags" : {{ route_table.tags | to_cfn_tag }}
            }
        },
{% endfor %}
{% for subnet_route_table_association in model.subnet_route_table_associations %}
        "{{ subnet_route_table_association.cfn_resource_name() }}" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "RouteTableId" : {{ subnet_route_table_association.route_table | to_cfn_ref }},
                "SubnetId" : {{ subnet_route_table_association.subnet | to_cfn_ref }}
            }
        },
{% endfor %}
{% for instance in model.instances %}
        "{{ instance.cfn_resource_name() }}" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
                "AvailabilityZone" : "{{ instance.placement }}",
                "ImageId" : "{{ instance.image_id }}",
                "InstanceType" : "{{ instance.instance_type }}",
                "KernelId" : "{{ instance.kernel }}",
                "KeyName" : "{{ instance.key_name }}",
                "Monitoring" : "{{ instance.monitored }}",
                "PrivateIpAddress" : "{{ instance.private_ip_address }}",
                "SourceDestCheck" : "{{ instance.get_attribute('sourceDestCheck').sourceDestCheck }}",
                "SubnetId" : {{ instance.subnet | to_cfn_ref }},
                "Tags" : {{ instance.tags | to_cfn_tag }},
                "Tenancy" : "{{ instance.placement_tenancy }}"
            }
        },
{% endfor %}

{% for route in model.routes if route.gateway.id != 'local' %}
        "{{ route.cfn_resource_name() }}": {
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "DestinationCidrBlock" : "{{ route.destination_cidr_block }}",
                "RouteTableId" : {{ route.route_table | to_cfn_ref }}{% if route.gateway is not none %},
                "GatewayId" : {{ route.gateway | to_cfn_ref }}{% endif %}{% if route.instance is not none %},
                "InstanceId" : {{ route.instance | to_cfn_ref }}{% endif %}{% if route.networkinterface is defined %},
                "NetworkInterfaceId" : {{ route.networkinterface | to_cfn_ref }}{% endif %}

            }
        },
{% endfor %}

{% for as_group in model.auto_scaling_groups %}
        "{{ as_group.cfn_resource_name() }}": {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "AvailabilityZones" : {{ as_group.availability_zones | to_json_list }},
                "Cooldown" : "{{ as_group.cooldown }}",
                "DesiredCapacity" : "{{ as_group.desired_capacity }}",
                "HealthCheckGracePeriod" : "{{ as_group.health_check_period }}",
                "HealthCheckType" : "{{ as_group.health_check_type }}",
                "LaunchConfigurationName" : {{ as_group.launch_configuration | to_cfn_ref }},
                "LoadBalancerNames" : {{ as_group.load_balancers | to_json_list }},
                "MaxSize" : "{{ as_group.max_size }}",
                "MinSize" : "{{ as_group.min_size }}",
                "VPCZoneIdentifier" : {{ as_group.subnets | to_cfn_ref_list }},
                "Tags" : {{ as_group.tags | to_cfn_tag }}
            }
        },
{% endfor %}
{% for as_lc in model.launch_configurations %}
        "{{ as_lc.cfn_resource_name() }}": {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "BlockDeviceMappings" : {{ as_lc.block_device_mappings | to_json_list }},
{% if as_lc.instance_profile_name %}
                "IamInstanceProfile" : "{{ as_lc.instance_profile_name }}",
{% endif %}
                "ImageId" : "{{ as_lc.image_id }}",
                "InstanceMonitoring" : "{{ as_lc.instance_monitoring.enabled }}",
                "InstanceType" : "{{ as_lc.instance_type }}",
{% if as_lc.kernel_id %}
                "KernelId" : "{{ as_lc.kernel_id }}",
{% endif %}
{% if as_lc.key_name %}
                "KeyName" : "{{ as_lc.key_name }}",
{% endif %}
{% if as_lc.ramdisk_id %}
                "RamDiskId" : "{{ as_lc.ramdisk_id }}",
{% endif %}
                "SecurityGroups" : {{ as_lc.security_groups | to_cfn_ref_list }},
{% if as_lc.spot_price %}
                "SpotPrice" : "{{ as_lc.spot_price }}",
{% endif %}
                "UserData" : "{{ as_lc.user_data }}"
            }
        },
{% endfor %}

{% for db_instance in model.db_instances %}
        "{{ db_instance.cfn_resource_name() }}": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": "{{ db_instance.allocated_storage }}",
                "AutoMinorVersionUpgrade" : "{{ db_instance.AutoMinorVersionUpgrade }}",
                "AvailabilityZone" : "{{ db_instance.availability_zone }}",
                "BackupRetentionPeriod" : "{{ db_instance.backup_retention_period }}",
                "DBInstanceClass" : "{{ db_instance.instance_class }}",
                "DBName" : "{{ db_instance.DBName }}",
                "DBParameterGroupName" : "{{ db_instance.parameter_group }}",
                "Engine" : "{{ db_instance.engine }}",
                "EngineVersion" : "{{ db_instance.EngineVersion }}",
                "LicenseModel" : "{{ db_instance.LicenseModel }}",
                "MasterUsername" : "{{ db_instance.master_username }}",
                "MasterUserPassword" : "",
                "MultiAZ" : "{{ db_instance.multi_az }}",
                "Port" : "{{ db_instance.endpoint[1] }}",
                "PreferredBackupWindow" : "{{ db_instance.preferred_backup_window }}",
                "PreferredMaintenanceWindow" : "{{ db_instance.preferred_maintenance_window }}"
            }
        },
{% endfor %}

{% for as_policy in model.scaling_policies %}
        "{{ as_policy.cfn_resource_name() }}": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType" : "{{ as_policy.adjustment_type }}",
                "AutoScalingGroupName" : "{{ as_policy.as_name }}",
{% if as_policy.scaling_adjustment %}
                "ScalingAdjustment" : "{{ as_policy.scaling_adjustment }}",
{% endif %}
                "Cooldown" : "{{ as_policy.cooldown }}"
            }
        },
{% endfor %}

{% for sns_topic in model.sns_topics %}
        "{{ sns_topic.cfn_resource_name() }}": {
            "Type" : "AWS::SNS::Topic",
            "Properties" : {
                "Subscription" : {{ sns_topic.subscriptions | to_json_list }}
            }
        }{% if not loop.last %},{% endif %}

{% endfor %}
    }
}
